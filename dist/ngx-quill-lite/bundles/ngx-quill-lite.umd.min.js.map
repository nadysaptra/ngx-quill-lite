{"version":3,"sources":["../../../projects/ngx-quill-lite/src/lib/quill-editor.service.ts","../../../projects/ngx-quill-lite/src/lib/quill-editor/quill-editor.component.ts","../../../projects/ngx-quill-lite/src/lib/ngx-quill-lite.module.ts"],"names":["QuillEditorService","document","this","_loadedLibraries","prototype","lazyLoadQuill","forkJoin","loadScript","loadStyle","url","_this","asObservable","ReplaySubject","script","createElement","type","async","src","onload","next","complete","body","appendChild","style","href","rel","getElementsByTagName","Injectable","args","providedIn","Inject","DOCUMENT","QuillEditorComponent","elementRef","zone","svc","html","htmlChange","EventEmitter","showEditor","ngOnInit","subscribe","_","Quill","defaultView","setupQuill","toolbarElem","nativeElement","querySelector","editorElem","quillEditor","format","theme","modules","toolbar","contents","clipboard","convert","setContents","history","clear","textChangeEvent","on","delta","oldDelta","source","html_1","root","innerHTML","run","emit","ngOnDestroy","removeListener","Component","selector","template","ElementRef","NgZone","Input","Output","NgModule","declarations","imports","CommonModule","FormsModule","exports"],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { ReplaySubject, Observable, forkJoin } from 'rxjs';\nimport { DOCUMENT } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuillEditorService {\n  private _loadedLibraries: { [url: string]: ReplaySubject<any> } = {};\n  quilljs: any;\n\n  constructor(@Inject(DOCUMENT) private readonly document: any) {}\n\n  lazyLoadQuill(): Observable<any> {\n    return forkJoin([\n      this.loadScript('assets/quill/quill.min.js'),\n      this.loadStyle('assets/quill/quill.snow.css')\n    ]);\n  }\n\n  private loadScript(url: string): Observable<any> {\n    if (this._loadedLibraries[url]) {\n      return this._loadedLibraries[url].asObservable();\n    }\n\n    this._loadedLibraries[url] = new ReplaySubject();\n\n    const script = this.document.createElement('script');\n    script.type = 'text/javascript';\n    script.async = true;\n    script.src = url;\n    script.onload = () => {\n      this._loadedLibraries[url].next();\n      this._loadedLibraries[url].complete();\n    };\n\n    this.document.body.appendChild(script);\n\n    return this._loadedLibraries[url].asObservable();\n  }\n\n  private loadStyle(url: string): Observable<any> {\n    if (this._loadedLibraries[url]) {\n      return this._loadedLibraries[url].asObservable();\n    }\n\n    this._loadedLibraries[url] = new ReplaySubject();\n\n    const style = this.document.createElement('link');\n    style.type = 'text/css';\n    style.href = url;\n    style.rel = 'stylesheet';\n    style.onload = () => {\n      this._loadedLibraries[url].next();\n      this._loadedLibraries[url].complete();\n    };\n\n    const head = document.getElementsByTagName('head')[0];\n    head.appendChild(style);\n\n    return this._loadedLibraries[url].asObservable();\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, ElementRef, EventEmitter, Inject, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\n\nimport { QuillEditorService } from '../quill-editor.service';\n\ndeclare var Quill: any;\n\n@Component({\n  selector: 'quill-editor',\n  templateUrl: './quill-editor.component.html',\n  styleUrls: ['./quill-editor.component.css']\n})\nexport class QuillEditorComponent implements OnInit, OnDestroy {\n  @Input() html = '';\n  @Output() htmlChange = new EventEmitter<string>();\n  quillEditor: any;\n  private textChangeEvent: any;\n  showEditor = false;\n\n  constructor(\n    private elementRef: ElementRef,\n    private zone: NgZone,\n    private readonly svc: QuillEditorService,\n    @Inject(DOCUMENT) private readonly document: any\n  ) {}\n\n  ngOnInit() {\n    this.svc.lazyLoadQuill().subscribe(_ => {\n      if (!Quill) {\n        Quill = this.document.defaultView.Quill;\n      }\n      this.setupQuill();\n    });\n  }\n\n  setupQuill() {\n    if (!Quill) {\n      return;\n    }\n    // use generic align styles\n    // const align = Quill.import('attributors/style/align');\n    // align.whitelist = ['right', 'center', 'justify'];\n    // Quill.register(align, true);\n\n    const toolbarElem = this.elementRef.nativeElement.querySelector(\n      '[quill-editor-toolbar]'\n    );\n    const editorElem = this.elementRef.nativeElement.querySelector(\n      '[quill-editor-container]'\n    );\n    this.quillEditor = new Quill(editorElem, {\n      format: 'html',\n      theme: 'snow',\n      modules: {\n        toolbar: toolbarElem\n      }\n    });\n\n    const contents = this.quillEditor.clipboard.convert(this.html);\n    this.quillEditor.setContents(contents, 'silent');\n    this.quillEditor.history.clear();\n\n    this.textChangeEvent = this.quillEditor.on(\n      'text-change',\n      (delta: any, oldDelta: any, source: string): void => {\n        if (source === 'user') {\n          let html: string | null = this.quillEditor.root.innerHTML;\n          if (html === '<p><br></p>' || html === '<div><br><div>') {\n            html = null;\n          }\n          this.zone.run(() => {\n            this.htmlChange.emit(html);\n          });\n        }\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.textChangeEvent) {\n      this.textChangeEvent.removeListener('text-change');\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { QuillEditorComponent } from './quill-editor/quill-editor.component';\n\n@NgModule({\n  declarations: [QuillEditorComponent],\n  imports: [CommonModule, FormsModule],\n  exports: [QuillEditorComponent]\n})\nexport class NgxQuillLite {}\n"]}